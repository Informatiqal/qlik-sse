// source: SSE.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

goog.exportSymbol('proto.qlik.sse.BundledRows', null, global);
goog.exportSymbol('proto.qlik.sse.Capabilities', null, global);
goog.exportSymbol('proto.qlik.sse.CommonRequestHeader', null, global);
goog.exportSymbol('proto.qlik.sse.DataType', null, global);
goog.exportSymbol('proto.qlik.sse.Dual', null, global);
goog.exportSymbol('proto.qlik.sse.Empty', null, global);
goog.exportSymbol('proto.qlik.sse.FieldDescription', null, global);
goog.exportSymbol('proto.qlik.sse.FunctionDefinition', null, global);
goog.exportSymbol('proto.qlik.sse.FunctionRequestHeader', null, global);
goog.exportSymbol('proto.qlik.sse.FunctionType', null, global);
goog.exportSymbol('proto.qlik.sse.Parameter', null, global);
goog.exportSymbol('proto.qlik.sse.Row', null, global);
goog.exportSymbol('proto.qlik.sse.ScriptRequestHeader', null, global);
goog.exportSymbol('proto.qlik.sse.TableDescription', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.qlik.sse.Empty = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.qlik.sse.Empty, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.qlik.sse.Empty.displayName = 'proto.qlik.sse.Empty';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.qlik.sse.Parameter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.qlik.sse.Parameter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.qlik.sse.Parameter.displayName = 'proto.qlik.sse.Parameter';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.qlik.sse.FieldDescription = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.qlik.sse.FieldDescription.repeatedFields_, null);
};
goog.inherits(proto.qlik.sse.FieldDescription, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.qlik.sse.FieldDescription.displayName = 'proto.qlik.sse.FieldDescription';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.qlik.sse.FunctionDefinition = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.qlik.sse.FunctionDefinition.repeatedFields_, null);
};
goog.inherits(proto.qlik.sse.FunctionDefinition, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.qlik.sse.FunctionDefinition.displayName = 'proto.qlik.sse.FunctionDefinition';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.qlik.sse.Capabilities = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.qlik.sse.Capabilities.repeatedFields_, null);
};
goog.inherits(proto.qlik.sse.Capabilities, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.qlik.sse.Capabilities.displayName = 'proto.qlik.sse.Capabilities';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.qlik.sse.Dual = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.qlik.sse.Dual, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.qlik.sse.Dual.displayName = 'proto.qlik.sse.Dual';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.qlik.sse.Row = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.qlik.sse.Row.repeatedFields_, null);
};
goog.inherits(proto.qlik.sse.Row, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.qlik.sse.Row.displayName = 'proto.qlik.sse.Row';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.qlik.sse.BundledRows = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.qlik.sse.BundledRows.repeatedFields_, null);
};
goog.inherits(proto.qlik.sse.BundledRows, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.qlik.sse.BundledRows.displayName = 'proto.qlik.sse.BundledRows';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.qlik.sse.ScriptRequestHeader = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.qlik.sse.ScriptRequestHeader.repeatedFields_, null);
};
goog.inherits(proto.qlik.sse.ScriptRequestHeader, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.qlik.sse.ScriptRequestHeader.displayName = 'proto.qlik.sse.ScriptRequestHeader';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.qlik.sse.FunctionRequestHeader = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.qlik.sse.FunctionRequestHeader, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.qlik.sse.FunctionRequestHeader.displayName = 'proto.qlik.sse.FunctionRequestHeader';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.qlik.sse.CommonRequestHeader = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.qlik.sse.CommonRequestHeader, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.qlik.sse.CommonRequestHeader.displayName = 'proto.qlik.sse.CommonRequestHeader';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.qlik.sse.TableDescription = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.qlik.sse.TableDescription.repeatedFields_, null);
};
goog.inherits(proto.qlik.sse.TableDescription, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.qlik.sse.TableDescription.displayName = 'proto.qlik.sse.TableDescription';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.qlik.sse.Empty.prototype.toObject = function(opt_includeInstance) {
  return proto.qlik.sse.Empty.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.qlik.sse.Empty} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.qlik.sse.Empty.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.qlik.sse.Empty}
 */
proto.qlik.sse.Empty.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.qlik.sse.Empty;
  return proto.qlik.sse.Empty.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.qlik.sse.Empty} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.qlik.sse.Empty}
 */
proto.qlik.sse.Empty.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.qlik.sse.Empty.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.qlik.sse.Empty.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.qlik.sse.Empty} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.qlik.sse.Empty.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.qlik.sse.Parameter.prototype.toObject = function(opt_includeInstance) {
  return proto.qlik.sse.Parameter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.qlik.sse.Parameter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.qlik.sse.Parameter.toObject = function(includeInstance, msg) {
  var f, obj = {
    datatype: jspb.Message.getFieldWithDefault(msg, 1, 0),
    name: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.qlik.sse.Parameter}
 */
proto.qlik.sse.Parameter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.qlik.sse.Parameter;
  return proto.qlik.sse.Parameter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.qlik.sse.Parameter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.qlik.sse.Parameter}
 */
proto.qlik.sse.Parameter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.qlik.sse.DataType} */ (reader.readEnum());
      msg.setDatatype(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.qlik.sse.Parameter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.qlik.sse.Parameter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.qlik.sse.Parameter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.qlik.sse.Parameter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDatatype();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional DataType dataType = 1;
 * @return {!proto.qlik.sse.DataType}
 */
proto.qlik.sse.Parameter.prototype.getDatatype = function() {
  return /** @type {!proto.qlik.sse.DataType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.qlik.sse.DataType} value
 * @return {!proto.qlik.sse.Parameter} returns this
 */
proto.qlik.sse.Parameter.prototype.setDatatype = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.qlik.sse.Parameter.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.qlik.sse.Parameter} returns this
 */
proto.qlik.sse.Parameter.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.qlik.sse.FieldDescription.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.qlik.sse.FieldDescription.prototype.toObject = function(opt_includeInstance) {
  return proto.qlik.sse.FieldDescription.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.qlik.sse.FieldDescription} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.qlik.sse.FieldDescription.toObject = function(includeInstance, msg) {
  var f, obj = {
    datatype: jspb.Message.getFieldWithDefault(msg, 1, 0),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    tagsList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.qlik.sse.FieldDescription}
 */
proto.qlik.sse.FieldDescription.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.qlik.sse.FieldDescription;
  return proto.qlik.sse.FieldDescription.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.qlik.sse.FieldDescription} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.qlik.sse.FieldDescription}
 */
proto.qlik.sse.FieldDescription.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.qlik.sse.DataType} */ (reader.readEnum());
      msg.setDatatype(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addTags(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.qlik.sse.FieldDescription.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.qlik.sse.FieldDescription.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.qlik.sse.FieldDescription} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.qlik.sse.FieldDescription.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDatatype();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTagsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
};


/**
 * optional DataType dataType = 1;
 * @return {!proto.qlik.sse.DataType}
 */
proto.qlik.sse.FieldDescription.prototype.getDatatype = function() {
  return /** @type {!proto.qlik.sse.DataType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.qlik.sse.DataType} value
 * @return {!proto.qlik.sse.FieldDescription} returns this
 */
proto.qlik.sse.FieldDescription.prototype.setDatatype = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.qlik.sse.FieldDescription.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.qlik.sse.FieldDescription} returns this
 */
proto.qlik.sse.FieldDescription.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated string tags = 3;
 * @return {!Array<string>}
 */
proto.qlik.sse.FieldDescription.prototype.getTagsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.qlik.sse.FieldDescription} returns this
 */
proto.qlik.sse.FieldDescription.prototype.setTagsList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.qlik.sse.FieldDescription} returns this
 */
proto.qlik.sse.FieldDescription.prototype.addTags = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.qlik.sse.FieldDescription} returns this
 */
proto.qlik.sse.FieldDescription.prototype.clearTagsList = function() {
  return this.setTagsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.qlik.sse.FunctionDefinition.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.qlik.sse.FunctionDefinition.prototype.toObject = function(opt_includeInstance) {
  return proto.qlik.sse.FunctionDefinition.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.qlik.sse.FunctionDefinition} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.qlik.sse.FunctionDefinition.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    functiontype: jspb.Message.getFieldWithDefault(msg, 2, 0),
    returntype: jspb.Message.getFieldWithDefault(msg, 3, 0),
    paramsList: jspb.Message.toObjectList(msg.getParamsList(),
    proto.qlik.sse.Parameter.toObject, includeInstance),
    functionid: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.qlik.sse.FunctionDefinition}
 */
proto.qlik.sse.FunctionDefinition.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.qlik.sse.FunctionDefinition;
  return proto.qlik.sse.FunctionDefinition.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.qlik.sse.FunctionDefinition} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.qlik.sse.FunctionDefinition}
 */
proto.qlik.sse.FunctionDefinition.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {!proto.qlik.sse.FunctionType} */ (reader.readEnum());
      msg.setFunctiontype(value);
      break;
    case 3:
      var value = /** @type {!proto.qlik.sse.DataType} */ (reader.readEnum());
      msg.setReturntype(value);
      break;
    case 4:
      var value = new proto.qlik.sse.Parameter;
      reader.readMessage(value,proto.qlik.sse.Parameter.deserializeBinaryFromReader);
      msg.addParams(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFunctionid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.qlik.sse.FunctionDefinition.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.qlik.sse.FunctionDefinition.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.qlik.sse.FunctionDefinition} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.qlik.sse.FunctionDefinition.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFunctiontype();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getReturntype();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getParamsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.qlik.sse.Parameter.serializeBinaryToWriter
    );
  }
  f = message.getFunctionid();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.qlik.sse.FunctionDefinition.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.qlik.sse.FunctionDefinition} returns this
 */
proto.qlik.sse.FunctionDefinition.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional FunctionType functionType = 2;
 * @return {!proto.qlik.sse.FunctionType}
 */
proto.qlik.sse.FunctionDefinition.prototype.getFunctiontype = function() {
  return /** @type {!proto.qlik.sse.FunctionType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.qlik.sse.FunctionType} value
 * @return {!proto.qlik.sse.FunctionDefinition} returns this
 */
proto.qlik.sse.FunctionDefinition.prototype.setFunctiontype = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional DataType returnType = 3;
 * @return {!proto.qlik.sse.DataType}
 */
proto.qlik.sse.FunctionDefinition.prototype.getReturntype = function() {
  return /** @type {!proto.qlik.sse.DataType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.qlik.sse.DataType} value
 * @return {!proto.qlik.sse.FunctionDefinition} returns this
 */
proto.qlik.sse.FunctionDefinition.prototype.setReturntype = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * repeated Parameter params = 4;
 * @return {!Array<!proto.qlik.sse.Parameter>}
 */
proto.qlik.sse.FunctionDefinition.prototype.getParamsList = function() {
  return /** @type{!Array<!proto.qlik.sse.Parameter>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.qlik.sse.Parameter, 4));
};


/**
 * @param {!Array<!proto.qlik.sse.Parameter>} value
 * @return {!proto.qlik.sse.FunctionDefinition} returns this
*/
proto.qlik.sse.FunctionDefinition.prototype.setParamsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.qlik.sse.Parameter=} opt_value
 * @param {number=} opt_index
 * @return {!proto.qlik.sse.Parameter}
 */
proto.qlik.sse.FunctionDefinition.prototype.addParams = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.qlik.sse.Parameter, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.qlik.sse.FunctionDefinition} returns this
 */
proto.qlik.sse.FunctionDefinition.prototype.clearParamsList = function() {
  return this.setParamsList([]);
};


/**
 * optional int32 functionId = 5;
 * @return {number}
 */
proto.qlik.sse.FunctionDefinition.prototype.getFunctionid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.qlik.sse.FunctionDefinition} returns this
 */
proto.qlik.sse.FunctionDefinition.prototype.setFunctionid = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.qlik.sse.Capabilities.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.qlik.sse.Capabilities.prototype.toObject = function(opt_includeInstance) {
  return proto.qlik.sse.Capabilities.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.qlik.sse.Capabilities} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.qlik.sse.Capabilities.toObject = function(includeInstance, msg) {
  var f, obj = {
    allowscript: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    functionsList: jspb.Message.toObjectList(msg.getFunctionsList(),
    proto.qlik.sse.FunctionDefinition.toObject, includeInstance),
    pluginidentifier: jspb.Message.getFieldWithDefault(msg, 3, ""),
    pluginversion: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.qlik.sse.Capabilities}
 */
proto.qlik.sse.Capabilities.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.qlik.sse.Capabilities;
  return proto.qlik.sse.Capabilities.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.qlik.sse.Capabilities} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.qlik.sse.Capabilities}
 */
proto.qlik.sse.Capabilities.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAllowscript(value);
      break;
    case 2:
      var value = new proto.qlik.sse.FunctionDefinition;
      reader.readMessage(value,proto.qlik.sse.FunctionDefinition.deserializeBinaryFromReader);
      msg.addFunctions(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPluginidentifier(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setPluginversion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.qlik.sse.Capabilities.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.qlik.sse.Capabilities.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.qlik.sse.Capabilities} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.qlik.sse.Capabilities.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAllowscript();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getFunctionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.qlik.sse.FunctionDefinition.serializeBinaryToWriter
    );
  }
  f = message.getPluginidentifier();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getPluginversion();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional bool allowScript = 1;
 * @return {boolean}
 */
proto.qlik.sse.Capabilities.prototype.getAllowscript = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.qlik.sse.Capabilities} returns this
 */
proto.qlik.sse.Capabilities.prototype.setAllowscript = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * repeated FunctionDefinition functions = 2;
 * @return {!Array<!proto.qlik.sse.FunctionDefinition>}
 */
proto.qlik.sse.Capabilities.prototype.getFunctionsList = function() {
  return /** @type{!Array<!proto.qlik.sse.FunctionDefinition>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.qlik.sse.FunctionDefinition, 2));
};


/**
 * @param {!Array<!proto.qlik.sse.FunctionDefinition>} value
 * @return {!proto.qlik.sse.Capabilities} returns this
*/
proto.qlik.sse.Capabilities.prototype.setFunctionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.qlik.sse.FunctionDefinition=} opt_value
 * @param {number=} opt_index
 * @return {!proto.qlik.sse.FunctionDefinition}
 */
proto.qlik.sse.Capabilities.prototype.addFunctions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.qlik.sse.FunctionDefinition, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.qlik.sse.Capabilities} returns this
 */
proto.qlik.sse.Capabilities.prototype.clearFunctionsList = function() {
  return this.setFunctionsList([]);
};


/**
 * optional string pluginIdentifier = 3;
 * @return {string}
 */
proto.qlik.sse.Capabilities.prototype.getPluginidentifier = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.qlik.sse.Capabilities} returns this
 */
proto.qlik.sse.Capabilities.prototype.setPluginidentifier = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string pluginVersion = 4;
 * @return {string}
 */
proto.qlik.sse.Capabilities.prototype.getPluginversion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.qlik.sse.Capabilities} returns this
 */
proto.qlik.sse.Capabilities.prototype.setPluginversion = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.qlik.sse.Dual.prototype.toObject = function(opt_includeInstance) {
  return proto.qlik.sse.Dual.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.qlik.sse.Dual} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.qlik.sse.Dual.toObject = function(includeInstance, msg) {
  var f, obj = {
    numdata: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    strdata: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.qlik.sse.Dual}
 */
proto.qlik.sse.Dual.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.qlik.sse.Dual;
  return proto.qlik.sse.Dual.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.qlik.sse.Dual} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.qlik.sse.Dual}
 */
proto.qlik.sse.Dual.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setNumdata(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setStrdata(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.qlik.sse.Dual.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.qlik.sse.Dual.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.qlik.sse.Dual} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.qlik.sse.Dual.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNumdata();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = message.getStrdata();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional double numData = 1;
 * @return {number}
 */
proto.qlik.sse.Dual.prototype.getNumdata = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.qlik.sse.Dual} returns this
 */
proto.qlik.sse.Dual.prototype.setNumdata = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional string strData = 2;
 * @return {string}
 */
proto.qlik.sse.Dual.prototype.getStrdata = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.qlik.sse.Dual} returns this
 */
proto.qlik.sse.Dual.prototype.setStrdata = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.qlik.sse.Row.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.qlik.sse.Row.prototype.toObject = function(opt_includeInstance) {
  return proto.qlik.sse.Row.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.qlik.sse.Row} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.qlik.sse.Row.toObject = function(includeInstance, msg) {
  var f, obj = {
    dualsList: jspb.Message.toObjectList(msg.getDualsList(),
    proto.qlik.sse.Dual.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.qlik.sse.Row}
 */
proto.qlik.sse.Row.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.qlik.sse.Row;
  return proto.qlik.sse.Row.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.qlik.sse.Row} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.qlik.sse.Row}
 */
proto.qlik.sse.Row.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.qlik.sse.Dual;
      reader.readMessage(value,proto.qlik.sse.Dual.deserializeBinaryFromReader);
      msg.addDuals(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.qlik.sse.Row.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.qlik.sse.Row.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.qlik.sse.Row} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.qlik.sse.Row.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDualsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.qlik.sse.Dual.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Dual duals = 1;
 * @return {!Array<!proto.qlik.sse.Dual>}
 */
proto.qlik.sse.Row.prototype.getDualsList = function() {
  return /** @type{!Array<!proto.qlik.sse.Dual>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.qlik.sse.Dual, 1));
};


/**
 * @param {!Array<!proto.qlik.sse.Dual>} value
 * @return {!proto.qlik.sse.Row} returns this
*/
proto.qlik.sse.Row.prototype.setDualsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.qlik.sse.Dual=} opt_value
 * @param {number=} opt_index
 * @return {!proto.qlik.sse.Dual}
 */
proto.qlik.sse.Row.prototype.addDuals = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.qlik.sse.Dual, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.qlik.sse.Row} returns this
 */
proto.qlik.sse.Row.prototype.clearDualsList = function() {
  return this.setDualsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.qlik.sse.BundledRows.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.qlik.sse.BundledRows.prototype.toObject = function(opt_includeInstance) {
  return proto.qlik.sse.BundledRows.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.qlik.sse.BundledRows} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.qlik.sse.BundledRows.toObject = function(includeInstance, msg) {
  var f, obj = {
    rowsList: jspb.Message.toObjectList(msg.getRowsList(),
    proto.qlik.sse.Row.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.qlik.sse.BundledRows}
 */
proto.qlik.sse.BundledRows.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.qlik.sse.BundledRows;
  return proto.qlik.sse.BundledRows.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.qlik.sse.BundledRows} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.qlik.sse.BundledRows}
 */
proto.qlik.sse.BundledRows.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.qlik.sse.Row;
      reader.readMessage(value,proto.qlik.sse.Row.deserializeBinaryFromReader);
      msg.addRows(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.qlik.sse.BundledRows.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.qlik.sse.BundledRows.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.qlik.sse.BundledRows} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.qlik.sse.BundledRows.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRowsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.qlik.sse.Row.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Row rows = 1;
 * @return {!Array<!proto.qlik.sse.Row>}
 */
proto.qlik.sse.BundledRows.prototype.getRowsList = function() {
  return /** @type{!Array<!proto.qlik.sse.Row>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.qlik.sse.Row, 1));
};


/**
 * @param {!Array<!proto.qlik.sse.Row>} value
 * @return {!proto.qlik.sse.BundledRows} returns this
*/
proto.qlik.sse.BundledRows.prototype.setRowsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.qlik.sse.Row=} opt_value
 * @param {number=} opt_index
 * @return {!proto.qlik.sse.Row}
 */
proto.qlik.sse.BundledRows.prototype.addRows = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.qlik.sse.Row, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.qlik.sse.BundledRows} returns this
 */
proto.qlik.sse.BundledRows.prototype.clearRowsList = function() {
  return this.setRowsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.qlik.sse.ScriptRequestHeader.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.qlik.sse.ScriptRequestHeader.prototype.toObject = function(opt_includeInstance) {
  return proto.qlik.sse.ScriptRequestHeader.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.qlik.sse.ScriptRequestHeader} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.qlik.sse.ScriptRequestHeader.toObject = function(includeInstance, msg) {
  var f, obj = {
    script: jspb.Message.getFieldWithDefault(msg, 1, ""),
    functiontype: jspb.Message.getFieldWithDefault(msg, 2, 0),
    returntype: jspb.Message.getFieldWithDefault(msg, 3, 0),
    paramsList: jspb.Message.toObjectList(msg.getParamsList(),
    proto.qlik.sse.Parameter.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.qlik.sse.ScriptRequestHeader}
 */
proto.qlik.sse.ScriptRequestHeader.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.qlik.sse.ScriptRequestHeader;
  return proto.qlik.sse.ScriptRequestHeader.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.qlik.sse.ScriptRequestHeader} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.qlik.sse.ScriptRequestHeader}
 */
proto.qlik.sse.ScriptRequestHeader.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setScript(value);
      break;
    case 2:
      var value = /** @type {!proto.qlik.sse.FunctionType} */ (reader.readEnum());
      msg.setFunctiontype(value);
      break;
    case 3:
      var value = /** @type {!proto.qlik.sse.DataType} */ (reader.readEnum());
      msg.setReturntype(value);
      break;
    case 4:
      var value = new proto.qlik.sse.Parameter;
      reader.readMessage(value,proto.qlik.sse.Parameter.deserializeBinaryFromReader);
      msg.addParams(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.qlik.sse.ScriptRequestHeader.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.qlik.sse.ScriptRequestHeader.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.qlik.sse.ScriptRequestHeader} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.qlik.sse.ScriptRequestHeader.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getScript();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFunctiontype();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getReturntype();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getParamsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.qlik.sse.Parameter.serializeBinaryToWriter
    );
  }
};


/**
 * optional string script = 1;
 * @return {string}
 */
proto.qlik.sse.ScriptRequestHeader.prototype.getScript = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.qlik.sse.ScriptRequestHeader} returns this
 */
proto.qlik.sse.ScriptRequestHeader.prototype.setScript = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional FunctionType functionType = 2;
 * @return {!proto.qlik.sse.FunctionType}
 */
proto.qlik.sse.ScriptRequestHeader.prototype.getFunctiontype = function() {
  return /** @type {!proto.qlik.sse.FunctionType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.qlik.sse.FunctionType} value
 * @return {!proto.qlik.sse.ScriptRequestHeader} returns this
 */
proto.qlik.sse.ScriptRequestHeader.prototype.setFunctiontype = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional DataType returnType = 3;
 * @return {!proto.qlik.sse.DataType}
 */
proto.qlik.sse.ScriptRequestHeader.prototype.getReturntype = function() {
  return /** @type {!proto.qlik.sse.DataType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.qlik.sse.DataType} value
 * @return {!proto.qlik.sse.ScriptRequestHeader} returns this
 */
proto.qlik.sse.ScriptRequestHeader.prototype.setReturntype = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * repeated Parameter params = 4;
 * @return {!Array<!proto.qlik.sse.Parameter>}
 */
proto.qlik.sse.ScriptRequestHeader.prototype.getParamsList = function() {
  return /** @type{!Array<!proto.qlik.sse.Parameter>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.qlik.sse.Parameter, 4));
};


/**
 * @param {!Array<!proto.qlik.sse.Parameter>} value
 * @return {!proto.qlik.sse.ScriptRequestHeader} returns this
*/
proto.qlik.sse.ScriptRequestHeader.prototype.setParamsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.qlik.sse.Parameter=} opt_value
 * @param {number=} opt_index
 * @return {!proto.qlik.sse.Parameter}
 */
proto.qlik.sse.ScriptRequestHeader.prototype.addParams = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.qlik.sse.Parameter, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.qlik.sse.ScriptRequestHeader} returns this
 */
proto.qlik.sse.ScriptRequestHeader.prototype.clearParamsList = function() {
  return this.setParamsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.qlik.sse.FunctionRequestHeader.prototype.toObject = function(opt_includeInstance) {
  return proto.qlik.sse.FunctionRequestHeader.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.qlik.sse.FunctionRequestHeader} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.qlik.sse.FunctionRequestHeader.toObject = function(includeInstance, msg) {
  var f, obj = {
    functionid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    version: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.qlik.sse.FunctionRequestHeader}
 */
proto.qlik.sse.FunctionRequestHeader.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.qlik.sse.FunctionRequestHeader;
  return proto.qlik.sse.FunctionRequestHeader.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.qlik.sse.FunctionRequestHeader} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.qlik.sse.FunctionRequestHeader}
 */
proto.qlik.sse.FunctionRequestHeader.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFunctionid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setVersion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.qlik.sse.FunctionRequestHeader.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.qlik.sse.FunctionRequestHeader.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.qlik.sse.FunctionRequestHeader} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.qlik.sse.FunctionRequestHeader.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFunctionid();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getVersion();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional int32 functionId = 1;
 * @return {number}
 */
proto.qlik.sse.FunctionRequestHeader.prototype.getFunctionid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.qlik.sse.FunctionRequestHeader} returns this
 */
proto.qlik.sse.FunctionRequestHeader.prototype.setFunctionid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string version = 2;
 * @return {string}
 */
proto.qlik.sse.FunctionRequestHeader.prototype.getVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.qlik.sse.FunctionRequestHeader} returns this
 */
proto.qlik.sse.FunctionRequestHeader.prototype.setVersion = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.qlik.sse.CommonRequestHeader.prototype.toObject = function(opt_includeInstance) {
  return proto.qlik.sse.CommonRequestHeader.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.qlik.sse.CommonRequestHeader} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.qlik.sse.CommonRequestHeader.toObject = function(includeInstance, msg) {
  var f, obj = {
    appid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    userid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    cardinality: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.qlik.sse.CommonRequestHeader}
 */
proto.qlik.sse.CommonRequestHeader.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.qlik.sse.CommonRequestHeader;
  return proto.qlik.sse.CommonRequestHeader.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.qlik.sse.CommonRequestHeader} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.qlik.sse.CommonRequestHeader}
 */
proto.qlik.sse.CommonRequestHeader.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAppid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCardinality(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.qlik.sse.CommonRequestHeader.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.qlik.sse.CommonRequestHeader.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.qlik.sse.CommonRequestHeader} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.qlik.sse.CommonRequestHeader.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAppid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUserid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCardinality();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
};


/**
 * optional string appId = 1;
 * @return {string}
 */
proto.qlik.sse.CommonRequestHeader.prototype.getAppid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.qlik.sse.CommonRequestHeader} returns this
 */
proto.qlik.sse.CommonRequestHeader.prototype.setAppid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string userId = 2;
 * @return {string}
 */
proto.qlik.sse.CommonRequestHeader.prototype.getUserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.qlik.sse.CommonRequestHeader} returns this
 */
proto.qlik.sse.CommonRequestHeader.prototype.setUserid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int64 cardinality = 3;
 * @return {number}
 */
proto.qlik.sse.CommonRequestHeader.prototype.getCardinality = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.qlik.sse.CommonRequestHeader} returns this
 */
proto.qlik.sse.CommonRequestHeader.prototype.setCardinality = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.qlik.sse.TableDescription.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.qlik.sse.TableDescription.prototype.toObject = function(opt_includeInstance) {
  return proto.qlik.sse.TableDescription.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.qlik.sse.TableDescription} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.qlik.sse.TableDescription.toObject = function(includeInstance, msg) {
  var f, obj = {
    fieldsList: jspb.Message.toObjectList(msg.getFieldsList(),
    proto.qlik.sse.FieldDescription.toObject, includeInstance),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    numberofrows: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.qlik.sse.TableDescription}
 */
proto.qlik.sse.TableDescription.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.qlik.sse.TableDescription;
  return proto.qlik.sse.TableDescription.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.qlik.sse.TableDescription} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.qlik.sse.TableDescription}
 */
proto.qlik.sse.TableDescription.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.qlik.sse.FieldDescription;
      reader.readMessage(value,proto.qlik.sse.FieldDescription.deserializeBinaryFromReader);
      msg.addFields(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setNumberofrows(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.qlik.sse.TableDescription.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.qlik.sse.TableDescription.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.qlik.sse.TableDescription} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.qlik.sse.TableDescription.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFieldsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.qlik.sse.FieldDescription.serializeBinaryToWriter
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getNumberofrows();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
};


/**
 * repeated FieldDescription fields = 1;
 * @return {!Array<!proto.qlik.sse.FieldDescription>}
 */
proto.qlik.sse.TableDescription.prototype.getFieldsList = function() {
  return /** @type{!Array<!proto.qlik.sse.FieldDescription>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.qlik.sse.FieldDescription, 1));
};


/**
 * @param {!Array<!proto.qlik.sse.FieldDescription>} value
 * @return {!proto.qlik.sse.TableDescription} returns this
*/
proto.qlik.sse.TableDescription.prototype.setFieldsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.qlik.sse.FieldDescription=} opt_value
 * @param {number=} opt_index
 * @return {!proto.qlik.sse.FieldDescription}
 */
proto.qlik.sse.TableDescription.prototype.addFields = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.qlik.sse.FieldDescription, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.qlik.sse.TableDescription} returns this
 */
proto.qlik.sse.TableDescription.prototype.clearFieldsList = function() {
  return this.setFieldsList([]);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.qlik.sse.TableDescription.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.qlik.sse.TableDescription} returns this
 */
proto.qlik.sse.TableDescription.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int64 numberOfRows = 3;
 * @return {number}
 */
proto.qlik.sse.TableDescription.prototype.getNumberofrows = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.qlik.sse.TableDescription} returns this
 */
proto.qlik.sse.TableDescription.prototype.setNumberofrows = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * @enum {number}
 */
proto.qlik.sse.DataType = {
  STRING: 0,
  NUMERIC: 1,
  DUAL: 2
};

/**
 * @enum {number}
 */
proto.qlik.sse.FunctionType = {
  SCALAR: 0,
  AGGREGATION: 1,
  TENSOR: 2
};

goog.object.extend(exports, proto.qlik.sse);
